// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "greet_grpc/route_guide/routeguide";
option java_multiple_files = true;
option java_package = "io.grpc.examples.routeguide";
option java_outer_classname = "RouteGuideProto";

package routeguide;

// Interface exported by the server.
service RouteGuide {
  // A simple RPC.
  //
  // Obtains the feature at a given position.
  //
  // A feature with an empty name is returned if there's no feature at the given
  // position.
  // 简单rpc : 请求: 非流式 响应: 非流式,
  //给一个指定的点. 获得指定点的特征.
  rpc GetFeature(Point) returns (Feature) {}

  // A server-to-client streaming RPC.
  // 服务端流式RPC
  // Obtains the Features available within the given Rectangle.  Results are
  // 得到一个方块区域内的特征列表.
  // 客户端: 非流式的 方块坐标.
  // 服务端: 流式, 特征流
  // streamed rather than returned at once (e.g. in a response message with a
  // repeated field), as the rectangle may cover a large area and contain a
  // huge number of features.
  rpc ListFeatures(Rectangle) returns (stream Feature) {}

  // A client-to-server streaming RPC.
  // 客户端流式RPC
  // Accepts a stream of Points on a route being traversed, returning a
  // 接收 一系列 点坐标, 返回 一个路线汇总
  // RouteSummary when traversal is completed.
  rpc RecordRoute(stream Point) returns (RouteSummary) {}

  // A Bidirectional streaming RPC.
  // 双向流式RPC
  // 接收一系列的备注信息流,
  // Accepts a stream of RouteNotes sent while a route is being traversed,
  // 两个流独立操作
  // 客户端, 服务端 任意喜欢的顺序读写,
  // 例如: 服务端可以在写入响应钱等到接收所有的客户端消息, 也可以交替, 读一条处理一条.
  // while receiving other RouteNotes (e.g. from other users).
  rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}
}

// Points are represented as latitude-longitude pairs in the E7 representation
// (degrees multiplied by 10**7 and rounded to the nearest integer).
// Latitudes should be in the range +/- 90 degrees and longitude should be in
// the range +/- 180 degrees (inclusive).
message Point {
  int32 latitude = 1; //横坐标
  int32 longitude = 2; // 纵坐标
}

// A latitude-longitude rectangle, represented as two diagonally opposite
// points "lo" and "hi".
message Rectangle { // 矩形
  // One corner of the rectangle.
  Point lo = 1; // 一个角的坐标

  // The other corner of the rectangle.
  Point hi = 2; // 对角的坐标
}

// A feature names something at a given point.
//
// If a feature could not be named, the name is empty.
message Feature { // 特征
  // The name of the feature.
  string name = 1; // 特征的名称

  // The point where the feature is detected.
  Point location = 2; // 该特征所在的坐标位置
}

// A RouteNote is a message sent while at a given point.
message RouteNote { // 线路说明: 当给定一个坐标时候给予的说明信息
  // The location from which the message is sent.
  Point location = 1; // 坐标位置

  // The message to be sent.
  string message = 2; //坐标描述
}

// A RouteSummary is received in response to a RecordRoute rpc.
// 路线汇总, 对于一个路由记录的请求的返回的结果
// It contains the number of individual points received, the number of
// 接收到一系列的独立的点, 一些列涉及到的特征, 还有总距离计算
// detected features, and the total distance covered as the cumulative sum of
// the distance between each point.
message RouteSummary {
  // The number of points received.
  int32 point_count = 1;//接收到的点

  // The number of known features passed while traversing the route.
  int32 feature_count = 2;//特征的计算

  // The distance covered in metres.
  int32 distance = 3;//总长度

  // The duration of the traversal in seconds.
  int32 elapsed_time = 4;//总时间
}